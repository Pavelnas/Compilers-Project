//milestone_1.g4
grammar milestone_1;
start : Comment | MultiLineComment ;
SPACE: (' '| '\n') -> skip;
Comment : '#' .*? ('\n'|EOF)				-> channel(HIDDEN) ;
MultiLineComment: '#[' (MultiLineComment|.)*? ']#'	-> channel(HIDDEN) ;
LETTER: [A-Z] | [a-z] | [\u0080-\u00ff];
DIGIT: [0-9];
AND: [&] | 'and';
VARIABLE: ('var ' IDENTIFIER | 'let ' IDENTIFIER);
ADDR: 'addr';
AS: 'as';
ASM: 'asm';
BIND: 'bind';
BLOCK: 'block';
BREAK: 'break';
CASE: 'case';
CAST: 'cast';
CONCEPT: 'concept';
CONST:'const';
CONTINUE:'continue';
CONVERTER:'converter';
DEFER: 'defer';
DISCARD: 'discard';
DISTINCT: 'distinct';
DIV: 'div';
DO: 'do';
ELIF: 'elif';
ELSE: 'else';
END: 'end';
ENUM: 'enum';
EXCEPT: 'except';
EXPORT: 'export';
FINALLY: 'finally';
FOR: 'for';
FROM: 'from';
FUNC: 'func';
IF: 'if';
IMPORT: 'import';
IN: 'in';
INTERFACE: 'interface';
IS: 'is';
ISNOT: 'isnot';
ITERATOR: 'iterator';
LET: 'let';
MARCO: 'marco';
METHOD: 'method';
MIXIN: 'mixin';
MOD: 'mod';
NIL: 'nil';
NOT: 'not';
NOTIN: 'notin';
OBJECT: 'object';
OF: 'of';
OR: 'or';
OUT: 'out';
PROC: 'proc';
PTR: 'ptr';
RAISE: 'raise';
REF: 'ref';
RETURN: 'return';
SHL: 'shl';
SHR: 'shr';
STATIC: 'static';
TEMPLATE: 'template';
TRY: 'try';
TUPLE: 'tuple';
TYPE: 'type';
USING: 'using';
WHEN: 'when';
WHILE: 'while';
XOR: 'xor';
IDENTIFIER: LETTER+ ( [_] (LETTER+ | DIGIT) )*;
